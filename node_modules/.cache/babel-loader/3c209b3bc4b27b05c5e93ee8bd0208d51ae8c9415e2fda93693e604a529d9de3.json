{"ast":null,"code":"var _jsxFileName = \"C:\\\\Nikita\\\\\\u041A\\u0420\\\\project\\\\src\\\\components\\\\Canvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = props => {\n  _s();\n  const {\n    draw,\n    fps = 30,\n    establishContext,\n    establishCanvasWidth,\n    width = \"100%\",\n    height = \"100%\",\n    ...rest\n  } = props;\n  useEffect(() => {\n    let frameCount = 0;\n    let animationFrameId, fpsInterval, now, then, elapsed;\n    if (context) {\n      const render = () => {\n        animationFrameId = window.requestAnimationFrame(render);\n        now = Date.now();\n        elapsed = now - then;\n        if (elapsed > fpsInterval) {\n          // Get ready for next frame by setting then=now, but also adjust for your\n          // specified fpsInterval not being a multiple of RAF's interval (16.7ms)\n          then = now - elapsed % fpsInterval;\n          frameCount++;\n          draw();\n        }\n      };\n      const startRendering = fps => {\n        fpsInterval = 1000 / fps;\n        then = Date.now();\n        render();\n      };\n      startRendering(fps);\n    }\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw, context, resizeCanvas]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...rest,\n    style: {\n      backgroundColor: \"#000\",\n      width,\n      height,\n      position: \"absolute\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(Canvas, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","Canvas","props","_s","draw","fps","establishContext","establishCanvasWidth","width","height","rest","frameCount","animationFrameId","fpsInterval","now","then","elapsed","context","render","window","requestAnimationFrame","Date","startRendering","cancelAnimationFrame","resizeCanvas","ref","canvasRef","style","backgroundColor","position","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Nikita/лџла/project/src/components/Canvas.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nconst Canvas = (props) => {\r\n    const { draw, fps = 30, establishContext, establishCanvasWidth, width = \"100%\", height = \"100%\", ...rest } = props;\r\n    \r\n    useEffect(() => {\r\n        let frameCount = 0;\r\n        let animationFrameId, fpsInterval, now, then, elapsed;\r\n\r\n        if (context) {\r\n            const render = () => {\r\n                animationFrameId = window.requestAnimationFrame(render);\r\n                now = Date.now();\r\n                elapsed = now - then;\r\n                if (elapsed > fpsInterval) {\r\n                    // Get ready for next frame by setting then=now, but also adjust for your\r\n                    // specified fpsInterval not being a multiple of RAF's interval (16.7ms)\r\n                    then = now - (elapsed % fpsInterval);\r\n                    frameCount++;\r\n                    draw();\r\n                }\r\n            };\r\n            const startRendering = (fps) => {\r\n                fpsInterval = 1000 / fps;\r\n                then = Date.now();\r\n                render();\r\n            };\r\n            startRendering(fps);\r\n        }\r\n        return () => {\r\n            window.cancelAnimationFrame(animationFrameId);\r\n        };\r\n    }, [draw, context, resizeCanvas]);\r\n    return (\r\n        <canvas ref={canvasRef} {...rest} style={{ backgroundColor: \"#000\", width, height, position: \"absolute\" }} />\r\n    );\r\n};\r\n\r\nexport default Canvas;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,MAAM,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACtB,MAAM;IAAEC,IAAI;IAAEC,GAAG,GAAG,EAAE;IAAEC,gBAAgB;IAAEC,oBAAoB;IAAEC,KAAK,GAAG,MAAM;IAAEC,MAAM,GAAG,MAAM;IAAE,GAAGC;EAAK,CAAC,GAAGR,KAAK;EAElHL,SAAS,CAAC,MAAM;IACZ,IAAIc,UAAU,GAAG,CAAC;IAClB,IAAIC,gBAAgB,EAAEC,WAAW,EAAEC,GAAG,EAAEC,IAAI,EAAEC,OAAO;IAErD,IAAIC,OAAO,EAAE;MACT,MAAMC,MAAM,GAAGA,CAAA,KAAM;QACjBN,gBAAgB,GAAGO,MAAM,CAACC,qBAAqB,CAACF,MAAM,CAAC;QACvDJ,GAAG,GAAGO,IAAI,CAACP,GAAG,CAAC,CAAC;QAChBE,OAAO,GAAGF,GAAG,GAAGC,IAAI;QACpB,IAAIC,OAAO,GAAGH,WAAW,EAAE;UACvB;UACA;UACAE,IAAI,GAAGD,GAAG,GAAIE,OAAO,GAAGH,WAAY;UACpCF,UAAU,EAAE;UACZP,IAAI,CAAC,CAAC;QACV;MACJ,CAAC;MACD,MAAMkB,cAAc,GAAIjB,GAAG,IAAK;QAC5BQ,WAAW,GAAG,IAAI,GAAGR,GAAG;QACxBU,IAAI,GAAGM,IAAI,CAACP,GAAG,CAAC,CAAC;QACjBI,MAAM,CAAC,CAAC;MACZ,CAAC;MACDI,cAAc,CAACjB,GAAG,CAAC;IACvB;IACA,OAAO,MAAM;MACTc,MAAM,CAACI,oBAAoB,CAACX,gBAAgB,CAAC;IACjD,CAAC;EACL,CAAC,EAAE,CAACR,IAAI,EAAEa,OAAO,EAAEO,YAAY,CAAC,CAAC;EACjC,oBACIxB,OAAA;IAAQyB,GAAG,EAAEC,SAAU;IAAA,GAAKhB,IAAI;IAAEiB,KAAK,EAAE;MAAEC,eAAe,EAAE,MAAM;MAAEpB,KAAK;MAAEC,MAAM;MAAEoB,QAAQ,EAAE;IAAW;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAErH,CAAC;AAAC9B,EAAA,CAlCIF,MAAM;AAAAiC,EAAA,GAANjC,MAAM;AAoCZ,eAAeA,MAAM;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}