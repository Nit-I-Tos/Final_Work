{"ast":null,"code":"var _jsxFileName = \"C:\\\\Nikita\\\\\\u041A\\u0420\\\\project\\\\src\\\\components\\\\Canvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = props => {\n  _s();\n  const {\n    draw,\n    fps = 30,\n    establishContext,\n    establishCanvasWidth,\n    width = \"100%\",\n    height = \"100%\",\n    ...rest\n  } = props;\n  const canvasRef = useRef(null);\n  const [context, setContext] = useState(null);\n  const resizeCanvas = context => {\n    const canvas = context.canvas;\n    const {\n      width,\n      height\n    } = canvas.getBoundingClientRect();\n    if (canvas.width !== width || canvas.height !== height) {\n      const {\n        devicePixelRatio: ratio = 1\n      } = window;\n      canvas.width = width * ratio;\n      canvas.height = height * ratio;\n      if (establishCanvasWidth) {\n        establishCanvasWidth(canvas.width);\n      }\n      context.scale(ratio, ratio);\n      return true;\n    }\n    return false;\n  };\n  useEffect(() => {\n    //i.e. value other than null or undefined\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      setContext(ctx);\n      if (establishContext) {\n        establishContext(ctx);\n      }\n    }\n  });\n  useEffect(() => {\n    let frameCount = 0;\n    let animationFrameId, fpsInterval, now, then, elapsed;\n    if (context) {\n      const render = () => {\n        animationFrameId = window.requestAnimationFrame(render);\n        now = Date.now();\n        elapsed = now - then;\n        if (elapsed > fpsInterval) {\n          // Get ready for next frame by setting then=now, but also adjust for your\n          // specified fpsInterval not being a multiple of RAF's interval (16.7ms)\n          then = now - elapsed % fpsInterval;\n          frameCount++;\n          draw();\n        }\n      };\n      const startRendering = fps => {\n        fpsInterval = 1000 / fps;\n        then = Date.now();\n        render();\n      };\n      startRendering(fps);\n    }\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw, context, resizeCanvas]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...rest,\n    style: {\n      backgroundColor: \"#000\",\n      width,\n      height,\n      position: \"absolute\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(Canvas, \"BfaIBKJ0SPT2j27htTYcAZyCB6o=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","Canvas","props","_s","draw","fps","establishContext","establishCanvasWidth","width","height","rest","canvasRef","context","setContext","resizeCanvas","canvas","getBoundingClientRect","devicePixelRatio","ratio","window","scale","current","ctx","getContext","frameCount","animationFrameId","fpsInterval","now","then","elapsed","render","requestAnimationFrame","Date","startRendering","cancelAnimationFrame","ref","style","backgroundColor","position","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Nikita/лџла/project/src/components/Canvas.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nconst Canvas = (props) => {\r\n    const { draw, fps = 30, establishContext, establishCanvasWidth, width = \"100%\", height = \"100%\", ...rest } = props;\r\n    const canvasRef = useRef(null);\r\n    const [context, setContext] = useState(null);\r\n    const resizeCanvas = (context) => {\r\n        const canvas = context.canvas;\r\n        const { width, height } = canvas.getBoundingClientRect();\r\n \r\n        if (canvas.width !== width || canvas.height !== height) {\r\n            const { devicePixelRatio: ratio = 1 } = window;\r\n            canvas.width = width * ratio;\r\n            canvas.height = height * ratio;\r\n            if (establishCanvasWidth) {\r\n                establishCanvasWidth(canvas.width);\r\n            }\r\n            context.scale(ratio, ratio);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    useEffect(() => {\r\n        //i.e. value other than null or undefined\r\n        if (canvasRef.current) {\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext(\"2d\");\r\n            setContext(ctx);\r\n            if (establishContext) {\r\n                establishContext(ctx);\r\n            }\r\n        }})\r\n    useEffect(() => {\r\n        let frameCount = 0;\r\n        let animationFrameId, fpsInterval, now, then, elapsed;\r\n\r\n        if (context) {\r\n            const render = () => {\r\n                animationFrameId = window.requestAnimationFrame(render);\r\n                now = Date.now();\r\n                elapsed = now - then;\r\n                if (elapsed > fpsInterval) {\r\n                    // Get ready for next frame by setting then=now, but also adjust for your\r\n                    // specified fpsInterval not being a multiple of RAF's interval (16.7ms)\r\n                    then = now - (elapsed % fpsInterval);\r\n                    frameCount++;\r\n                    draw();\r\n                }\r\n            };\r\n            const startRendering = (fps) => {\r\n                fpsInterval = 1000 / fps;\r\n                then = Date.now();\r\n                render();\r\n            };\r\n            startRendering(fps);\r\n        }\r\n        return () => {\r\n            window.cancelAnimationFrame(animationFrameId);\r\n        };\r\n    }, [draw, context, resizeCanvas]);\r\n    return (\r\n        <canvas ref={canvasRef} {...rest} style={{ backgroundColor: \"#000\", width, height, position: \"absolute\" }} />\r\n    );\r\n};\r\n\r\nexport default Canvas;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}